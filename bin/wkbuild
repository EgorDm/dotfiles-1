#! /bin/bash
# vim:set noet ts=4 sw=4:
#
# wkbuild
# Copyright (C) 2014-2017 Adrian Perez <aperez@igalia.com>
#
# Distributed under terms of the MIT license.
#
set -e

# Installation prefix. When specified, CMake and Ninja are invoked
# directly instead of relying on the "build-webkit" script.
prefix=''

# Full path to a Python 2.x executable. Auto-detected by default.
python_exe=''

# Toolchain to use: 'clang' or 'gcc'
compiler='clang'

# Build type: 'release' or 'debug'
buildtype='release'

# Whether to use Icecream (IceCC) to do a distributed build.
# Seeting to true forcs compiler='gcc'.
use_icecc=false

# Whether to use clang's Address Sanitizer (ASAN).
# Setting to true forces compiler='clang' above.
use_asan=false

# Use Clang's libc++ instead of GNU libstdc++
use_libcxx=false

# Number of parallel jobs. By default, it's set to the number of online
# CPUs. When doing a distributed build, this is multiplied by five.
parallel_jobs=$(( $(getconf _NPROCESSORS_ONLN) + 1 ))

# Whether to pick configuration values from /etc/makepkg.conf on Arch
use_arch=false

# Arguments passed down to Ninja in --cmakeargs= and --makeargs=
declare -a cmakeargs=()
declare -a makeargs=()

# CMake options used when doing a prefixed (i.e no build-webkit) compilation.
declare -r cmake_prefixbuild_opts=(
	-G Ninja
	'-DENABLE_GLES2=ON'
	'-DENABLE_GTK_DOC=OFF'
	'-DENABLE_MINIBROWSER=ON'
	'-DENABLE_PLUGIN_PROCESS_GTK2=OFF'
)

declare -r clang_opts=(
	'-ferror-limit=1'
	'-Qunused-arguments'
)
declare -r clang_asan_opts=(
	'-g'
	'-O1'
	'-fsanitize=address'
	'-fno-omit-frame-pointer'
)
declare -r clang_libcxx_opts=(
	'-stdlib=libc++'
)
declare -r link_libcxx_opts=(
	"${clang_libcxx_opts[@]}"
	'-lc++abi'
)

info () {
	printf -- "[1;1m%10s[0;0m â†’ %s\n" "$1" "$2"
}

die () {
	echo "$*" 1>&2
	exit 1
}


qstrip () {
	if [[ ${1:0:1} = \" && ${1:$((${#1} - 1))} = \" ]] ; then
		echo "${1:1:-1}"
	else
		echo "$1"
	fi
}


setup_icecc () {
	if ${use_asan} ; then
		die "Cannot use --asan and --icecc at the same time"
	fi

	local icecc_path=$(type -P icecc)
	if [[ -z ${icecc_path} && -x /usr/lib/icecream/bin/icecc ]] ; then
		icecc_path=/usr/lib/icecream/bin/icecc
	elif [[ -z ${icecc_path} ]] ; then
		echo 'IceCC not found. Is it installed?' 1>&2
		exit 1
	fi

	export CCACHE_PREFIX=${icecc_path}
	if [[ -n ${ICECC_VERSION} ]] ; then
		info "icecc" "Using preset toolchain"
	else
		ICECC_VERSION=''
		local tool tool_path
		for tool in popsicle icecc-mkenv ; do
			tool_path=$(type -P "${tool}")
			if [[ -x ${tool_path} ]] ; then
				info "icecc" "Using ${tool_path} (${compiler})"
				export ICECC_VERSION=$("${tool_path}" "/usr/bin/${compiler}")
				break
			fi
		done
		if [[ -z ${ICECC_VERSION} ]] ; then
			echo 'Cannot create IceCC toolchain tarball' 1>&2
			exit 1
		fi
	fi
	info "icecc" "${ICECC_VERSION}"

	# Debug Fission does not work with IceCC. Keeping it enabled prevents
	# build jobs to be sent for distributed compilation.
	if [[ ${buildtype} = debug ]] ; then
		cmakeargs+=( '-DDEBUG_FISSION=OFF' )
	fi

	parallel_jobs=$(( parallel_jobs * 5 ))
}


setup_asan () {
	if ${use_icecc} ; then
		die "Cannot use --asan and --icecc at the same time"
	fi

	local clang_dir=$(dirname "$(which clang)")
	if [[ -z ${ASAN_SYMBOLIZER_PATH} ]] ; then
		if [[ -x /usr/bin/llvm-symbolizer ]] ; then
			ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer
		else
			ASAN_SYMBOLIZER_PATH="${clang_dir}/llvm-symbolizer"
		fi
	fi

	[[ -x ${ASAN_SYMBOLIZER_PATH} ]] \
		|| die "${ASAN_SYMBOLIZER_PATH}: missing or it is not executable"
	export ASAN_SYMBOLIZER_PATH

	CXX="${clang_dir}/clang++"
	LD="${clang_dir}/clang++"
	CC="${clang_dir}/clang"
	CXXFLAGS="${clang_opts[*]} ${clang_asan_opts[*]}"
	LDFLAGS="${clang_asan_opts[*]}"
	CFLAGS="${clang_opts[*]} ${clang_asan_opts[*]}"

	compiler='clang'
	use_libcxx=true
}


setup_compiler_clang () {
	[[ -n ${CXX} ]] || CXX="clang++"
	[[ -n ${LD} ]] || LD="clang++"
	[[ -n ${CC} ]] || CC="clang"
	CXXFLAGS="${clang_opts[*]}"
	LDFLAGS="${clang_opts[*]}"
	CFLAGS="${clang_opts[*]}"

	if ${use_libcxx} ; then
		CXXFLAGS="${CXXFLAGS} ${clang_libcxx_opts[*]}"
		LDFLAGS="${LDFLAGS} ${link_libcxx_opts[*]}"
		CFLAGS="${CFLAGS} ${clang_libcxx_opts[*]}"
	fi

	export ICECC_CLANG_REMOTE_CPP=1
}


setup_compiler_gcc () {
	[[ -n ${CXX} ]] || CXX="g++"
	[[ -n ${LD} ]] || LD="g++"
	[[ -n ${CC} ]] || CC="gcc"
}


setup_arch () {
	local line
	[[ -r /etc/makepkg.conf ]] || return
	while read -r line ; do
		local value=$(qstrip "${line#*=}")
		case ${line} in
			CPPFLAGS=*)
				CFLAGS="${CFLAGS} ${value}"
				CXXFLAGS="${CXXFLAGS} ${value}"
				;;
			CFLAGS=*)
				CFLAGS="${CFLAGS} ${value}"
				;;
			CXXFLAGS=*)
				CXXFLAGS="${CXXFLAGS} ${value}"
				;;
			LDFLAGS=*)
				LDFLAGS="${LDFLAGS} ${value}"
				;;
			DEBUG_CFLAGS=*)
				if [[ ${buildtype} = debug ]] ; then
					CFLAGS="${CFLAGS} ${value}"
				fi
				;;
			DEBUG_CXXFLAGS=*)
				if [[ ${buildtype} = debug ]] ; then
					CXXFLAGS="${CXXFLAGS} ${value}"
				fi
				;;
		esac
	done < /etc/makepkg.conf
}


do_help () { cat <<EOM
Usage: $(basename "$0") [options]

Available options:

  --jobs=N          Use N parallel jobs.
  --cmake=ARG       Pass ARG down to CMake.
  --make=ARG        Pass ARG down to the build system.
  --debug, --dbg    Make a debug build
  --release, --rel  Make a release build.
  --clang           Build with Clang (usually the default).
  --gcc             Build with GCC.
  --libc++          Use Clang's libc++.
  --icecc           Use IceCC to do a distributed builf (forces --gcc).
  --asan            Build with Clang's Address Sanitizer (forces --clang).
  --archlinux       Pick compiler settings from "/etc/makepkg.conf".
  --gtk, --wpe      Choose which port to build (default: gtk).
  --prefix=PATH     Installation prefix, causes CMake to be used directly
                    instead of using the "build-webkit" script.
  --python=PATH     Full path to a Python 2.x executabble (default: detect).

Unrecognized options are passed down to the build system.

EOM
}


declare -a build_options=( )
declare build_port='gtk'
for flag in "$@"
do
	case ${flag} in
		--gtk)
			build_port='gtk'
			;;
		--wpe)
			build_port='wpe'
			;;
		--jobs=*)
			parallel_jobs=${flag#*=}
			;;
		--make=*)
			makeargs+=( "${flag#*=}" )
			;;
		--cmake=*)
			cmakeargs+=( "${flag#*=}" )
			;;
		--prefix=*)
			prefix=${flag#*=}
			;;
		--python=*)
			python_exe=${flag#*=}
			;;
		--debug | --dbg)
			buildtype='debug'
			;;
		--release | --rel)
			buildtype='release'
			;;
		--clang)
			compiler='clang'
			;;
		--gcc)
			compiler='gcc'
			;;
		--libc++)
			use_libcxx=true
			;;
		--icecc)
			use_icecc=true
			;;
		--asan)
			use_asan=true
			;;
		--archlinux)
			use_arch=true
			;;
		--help | -h)
			do_help
			exit 0
			;;
		*)
			# Pass down unrecognized flags to build-webkit
			build_options+=( "${flag}" )
			;;
	esac
done
# Prepend the flag used to indicate the port being built.
build_options=( "--${build_port}" "${build_options[@]}" )

# Detect whether we are building inside jhbuild, to adjust paths accordingly
if [[ -n ${JHBUILD_PREFIX} ]] ; then
	build_options=( "${build_options[@]}" "--prefix=${JHBUILD_PREFIX}" )
	if [[ -n ${JHBUILD_LIBDIR} ]] ; then
		build_options=( "${build_options[@]}" "--libdir=${JHBUILD_LIBDIR}" )
	fi
fi


if ${use_icecc} ; then setup_icecc ; fi
if ${use_asan}  ; then setup_asan  ; fi

setup_compiler_${compiler}

makeargs=( "${makeargs[@]}" "-j${parallel_jobs}" )

if [[ -z ${python_exe} ]] ; then
	for name in python2.7 python2 python ; do
		python_exe=$(type -P "${name}")
		if [[ -c ${python_exe} ]] ; then
			break
		fi
	done
else
	python_exe=$(type -P "${python_exe}")
fi
if [[ ! -x ${python_exe} ]] ; then
	die 'Could not find a suitable Python 2.x interpreter'
fi
# TODO: Check that the Python version is actually 2.x

if [[ -n ${prefix} ]] ; then
	cmakeargs=( "-DPORT=${build_port^^}"
		"-DCMAKE_BUILD_TYPE=${buildtype^}"
		"-DPYTHON_EXECUTABLE=${python_exe}"
		"-DCMAKE_INSTALL_PREFIX=${prefix}"
		"-DLIB_INSTALL_DIR=${prefix}/lib"
		"${cmake_prefixbuild_opts[@]}"
		"${cmakeargs[@]}"
	)
fi

export PKG_CONFIG_PATH LD CC CXX CFLAGS CXXFLAGS LDFLAGS

info "build"     "${buildtype}"
info "jobs"      "${parallel_jobs}"
info "makeargs"  "${makeargs[*]}"
info "cmakeargs" "${cmakeargs[*]}"
info "env:LD"    "${LD} ${LDFLAGS}"
info "env:CC"    "${CC} ${CFLAGS}"
info "env:CXX"   "${CXX} ${CXXFLAGS}"
echo

if [[ -n ${prefix} ]] ; then
	set -x
	cmake "${cmakeargs[@]}" ..
	ninja "${makeargs[@]}"
else
	set -x
	exec build-webkit "${build_options[@]}" "$@" "--${buildtype}" \
		--cmakeargs="${cmakeargs[*]}" --makeargs="${makeargs[*]}"
fi
