# Firstly, load the common customization script.
# If you don't like settings applied in this script, remove this line.
. --autoload --no-alias initialization/common

# These are additional aliases that are not defined in the common script.
# Uncomment to enable them.
#alias g='grep'
#alias l='$PAGER'
#alias --global L='|$PAGER'
#alias --global N='>/dev/null 2>&1' N1='>/dev/null' N2='2>/dev/null'

# Uncomment to enable direnv support. (jq required)
#_update_direnv() {
#  eval "$(
#    direnv export json |
#    jq -r 'to_entries | .[] |
#    if .value == null then
#      @sh "unset \(.key)"
#    else
#      @sh "export \(.key)=\(.value)"
#    end'
#  )"
#}
#_update_direnv
#YASH_AFTER_CD=("$YASH_AFTER_CD" '_update_direnv')

# And add your own customization below.

# This is in a function to be able to use local variables.
function yashrc_do_bindkeys {
  typeset M
  for M in v e ; do
    #
    # Bind Ctrl-Left and Ctrl-Right key sequences to jump around words, and
    # make Ctrl-W kill a normal word, which allows to use it for removing
    # path components and matches the behaviour of Ctrl-Left / Ctrl-Right.
    # The predefined behaviour (killing a "big" word) is moved to Alt-W.
    #
    bindkey -$M '\^[[1;5D' backward-emacsword
    bindkey -$M '\^[[1;5C' forward-emacsword
    bindkey -$M '\^W'      backward-kill-emacsword
    bindkey -$M '\^[w'     backward-kill-bigword

    # Bind Home/End/Delete for some funky terminals.
    bindkey -$M '\^[OH'    beginning-of-line
    bindkey -$M '\^[[H'    beginning-of-line
    bindkey -$M '\^A'      beginning-of-line
    bindkey -$M '\^[[1~'   beginning-of-line
    bindkey -$M '\^[OF'    end-of-line
    bindkey -$M '\^[[F'    end-of-line
    bindkey -$M '\^E'      end-of-line
    bindkey -$M '\^[[4~'   end-of-line
    bindkey -$M '\^[[3~'   delete-char

    # The following are just for convenience.
    bindkey -$M '\^L'      clear-and-redraw-all
    bindkey -$M '\^['      accept-prediction  # Alt-Enter
  done
}
yashrc_do_bindkeys
unset -f yashrc_do_bindkeys

alias -- '-'=popd

function '+' {
  if [ $# -eq 0 ] ; then
    cd -
  else
    pushd "$@"
  fi
}


# Colourful ls
if ls --version | grep GNU ; then
  alias ls='ls --color=auto -F'
else
  # In BSD systems, usually setting this maks "ls" use colors.
  export CLICOLOR=1
  export LSCOLORS=ExGxFxdxCxDxDxhbabacae
  if [ -n "$(which colorls)" ] ; then
    alias ls='colorls -F'
  else
    alias ls='ls -F'
  fi
fi 2> /dev/null 1>&2


# Weather report, in the console
function meteo {
  curl -s "http://meteo.connectical.com/${1:-}"
}


# Rust
export RUSTFLAGS='-C target-cpu=native'


# PATH additions
function yashrc_path_add {
  if [ -d "$1" ] ; then
    typeset item
    for item in ${PATH} ; do
      # Item is already in $PATH, skip.
      if [ "${item}" = "$1" ] ; then
        return
      fi
    done
    PATH="$1:${PATH}"
  fi
}

function yashrc_do_paths {
  typeset item
  typeset saved_ifs=${IFS}
  IFS=:
  for item in "$@" ; do
    yashrc_path_add "${item}"
  done
  IFS=${saved_ifs}
}

yashrc_do_paths \
  "${HOME}/.cargo/bin" \
  "${HOME}/.local/bin" \
  "${HOME}/.dotfiles/bin"

unset -f yashrc_do_paths yashrc_path_add

export GPG_TTY=$(tty)
if [ -x "$(which gpg-connect-agent 2> /dev/null)" ] ; then
  gpg-connect-agent -q updatestartuptty /bye > /dev/null
fi

# vim: set et sw=2 sts=2 tw=78 ft=sh:
