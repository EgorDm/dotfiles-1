#! /usr/bin/env zsh

FONT_NAME='PragmataPro Mono'
FONT_SIZE='11'
typeset -i FONT_SIZE

echo "font pango:${FONT_NAME} ${FONT_SIZE}"

cat <<< '
set $mod Mod4

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# kill focused window
bindsym $mod+Shift+q kill

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+b split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# Switch and move to previosly active workspace
workspace_auto_back_and_forth yes
bindsym $mod+Tab workspace back_and_forth
bindsym $mod+Shift+Tab move container to workspace back_and_forth; workspace back_and_forth

# Scratchpad management
bindsym $mod+minus scratchpad show
bindsym $mod+Shift+minus move scratchpad

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

bindsym $mod+Shift+period exec systemctl suspend

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        status_command i3status
        tray_output primary
        #mode hide
        #modifier $mod
}
'

# exit i3 (logs you out of your X session)
echo "bindsym \$mod+Shift+e exec \"i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'\""

if whence -p dmenu-launch &> /dev/null ; then
	echo 'bindsym $mod+d dmenu-launch'
elif whence -p dmenu_run &> /dev/null ; then
	echo "bindsym \$mod+d exec dmenu_run -fn '${FONT_NAME}:size=$(( FONT_SIZE + 1))' -p 'run '"
fi

if whence -p st &> /dev/null ; then
	echo "bindsym \$mod+Return exec st -f '${FONT_NAME}:size=$(( FONT_SIZE + 4))'"
else
	for item in dwt uxterm i3-sensible-terminal ; do
		if whence -p "${item}" &> /dev/null ; then
			echo "bindsym \$mod+Return exec ${item}"
			break
		fi
	done
fi

has_compositing=false
if [[ -r ${HOME}/.compton.conf ]] && whence -p compton &> /dev/null ; then
        has_compositing=true
        echo 'exec --no-startup-id compton'
fi

if [[ -r ${HOME}/.xsettingsd ]] && whence -p xsettingsd &> /dev/null ; then
	echo 'exec --no-startup-id xsettingsd'
fi

#
# Try notify-osd first, otherwise fall-back to dunst, otherwise let libnotify
# use D-Bus activation to bring up some kind of notification-daemon lookalike.
#
if ${has_compositing} && [[ -x /usr/lib/notify-osd/notify-osd ]] ; then
        echo 'exec /usr/lib/notify-osd/notify-osd'
elif whence -p dunst &> /dev/null ; then
	echo 'exec --no-startup-id dunst'
fi

if [[ -r ${HOME}/.fehbg ]] && whence -p feh &> /dev/null ; then
	echo "exec --no-startup-id sh '${HOME}/.fehbg'"
fi
if whence -p redshift-scheduler ; then
	echo 'exec --no-startup-id redshift-scheduler'
fi
if whence -p xss-lock &> /dev/null && whence -p i3lock &> /dev/null ; then
	echo 'exec --no-startup-id xss-lock -- i3lock -n'
fi
if whence -p nm-applet &> /dev/null ; then
	echo 'exec --no-startup-id nm-applet'
fi
